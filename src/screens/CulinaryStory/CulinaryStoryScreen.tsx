import React, { useState } from "react";
import { 
  View, 
  Text, 
  ScrollView, 
  TouchableOpacity, 
  Image, 
  ActivityIndicator 
} from "react-native";
import { culinaryStoryStyles } from './styles';

const CulinaryStoryScreen = () => {
  const [activeCategory, setActiveCategory] = useState('all');
  const [isLoading, setIsLoading] = useState(false);

  // Sample culinary stories data
  const stories = [
    {
      id: 1,
      title: "Kh√°m ph√° vƒÉn h√≥a ·∫©m th·ª±c Vi·ªát Nam",
      content: "N∆°i chia s·∫ª nh·ªØng c√¢u chuy·ªán th√∫ v·ªã v·ªÅ ·∫©m th·ª±c, t·ª´ nh·ªØng m√≥n ƒÉn truy·ªÅn th·ªëng ƒë·∫øn c√°c xu h∆∞·ªõng hi·ªán ƒë·∫°i. Kh√°m ph√° b√≠ m·∫≠t ƒë·∫±ng sau nh·ªØng h∆∞∆°ng v·ªã ƒë·∫∑c bi·ªát c·ªßa ·∫©m th·ª±c Vi·ªát Nam...",
      category: "culture",
      author: "Chef Minh",
      publishDate: "2 ng√†y tr∆∞·ªõc",
      image: "https://via.placeholder.com/350x200",
      featured: true
    },
    {
      id: 2,
      title: "B√≠ quy·∫øt n·∫•u ƒÉn t·ª´ c√°c ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp",
      content: "H·ªçc h·ªèi nh·ªØng k·ªπ thu·∫≠t n·∫•u ƒÉn ƒë·ªôc ƒë√°o v√† b√≠ quy·∫øt t·ª´ c√°c chuy√™n gia ·∫©m th·ª±c. T·ª´ c√°ch ch·ªçn nguy√™n li·ªáu ƒë·∫øn nh·ªØng tip nh·ªè gi√∫p m√≥n ƒÉn th√™m h·∫•p d·∫´n...",
      category: "tips",
      author: "Chef An",
      publishDate: "5 ng√†y tr∆∞·ªõc",
      image: "https://via.placeholder.com/350x200",
      featured: false
    },
    {
      id: 3,
      title: "H√†nh tr√¨nh kh√°m ph√° m√≥n ƒÉn ƒë·ªãa ph∆∞∆°ng",
      content: "C√πng nhau kh√°m ph√° nh·ªØng m√≥n ƒÉn ƒë·∫∑c s·∫£n t·ª´ kh·∫Øp m·ªçi mi·ªÅn ƒë·∫•t n∆∞·ªõc. M·ªói v√πng mi·ªÅn c√≥ nh·ªØng h∆∞∆°ng v·ªã ri√™ng bi·ªát, t·∫°o n√™n s·ª± ƒëa d·∫°ng phong ph√∫ c·ªßa ·∫©m th·ª±c Vi·ªát...",
      category: "travel",
      author: "Food Explorer",
      publishDate: "1 tu·∫ßn tr∆∞·ªõc",
      image: "https://via.placeholder.com/350x200",
      featured: false
    },
    {
      id: 4,
      title: "L·ªãch s·ª≠ ph√°t tri·ªÉn c·ªßa m√≥n ph·ªü Vi·ªát Nam",
      content: "T·ª´ m·ªôt m√≥n ƒÉn ƒë∆∞·ªùng ph·ªë ƒë∆°n gi·∫£n ƒë·∫øn bi·ªÉu t∆∞·ª£ng ·∫©m th·ª±c qu·ªëc gia. H√†nh tr√¨nh ph√°t tri·ªÉn v√† lan r·ªông c·ªßa m√≥n ph·ªü ra kh·∫Øp th·∫ø gi·ªõi...",
      category: "history",
      author: "Historian Chef",
      publishDate: "2 tu·∫ßn tr∆∞·ªõc",
      image: "https://via.placeholder.com/350x200",
      featured: false
    }
  ];

  const categories = [
    { key: 'all', label: 'T·∫•t c·∫£' },
    { key: 'culture', label: 'VƒÉn h√≥a' },
    { key: 'tips', label: 'B√≠ quy·∫øt' },
    { key: 'travel', label: 'Du l·ªãch' },
    { key: 'history', label: 'L·ªãch s·ª≠' }
  ];

  const filteredStories = stories.filter(story => 
    activeCategory === 'all' || story.category === activeCategory
  );

  const featuredStories = stories.filter(story => story.featured);

  const handleReadMore = (storyId: number) => {
    console.log('Read more story:', storyId);
    // Navigate to full story screen
  };

  const renderStoryCard = (story: any, featured = false) => (
    <View 
      key={story.id} 
      style={[
        culinaryStoryStyles.storyCard,
        featured && culinaryStoryStyles.featuredCard
      ]}
    >
      {/* Story Image */}
      <Image 
        source={{ uri: story.image }} 
        style={culinaryStoryStyles.storyImage} 
      />
      
      {/* Category Badge */}
      <Text style={culinaryStoryStyles.storyCategory}>
        {categories.find(cat => cat.key === story.category)?.label || story.category}
      </Text>
      
      {/* Story Title */}
      <Text style={culinaryStoryStyles.storyTitle}>
        {story.title}
      </Text>
      
      {/* Story Content Preview */}
      <Text style={culinaryStoryStyles.storyContent}>
        {story.content}
      </Text>
      
      {/* Read More Button */}
      <TouchableOpacity 
        style={culinaryStoryStyles.readMoreButton}
        onPress={() => handleReadMore(story.id)}
      >
        <Text style={culinaryStoryStyles.readMoreText}>ƒê·ªçc ti·∫øp</Text>
      </TouchableOpacity>
      
      {/* Story Metadata */}
      <View style={culinaryStoryStyles.storyMeta}>
        <View style={culinaryStoryStyles.authorInfo}>
          <View style={culinaryStoryStyles.authorAvatar} />
          <View>
            <Text style={culinaryStoryStyles.authorName}>{story.author}</Text>
            <Text style={culinaryStoryStyles.publishDate}>{story.publishDate}</Text>
          </View>
        </View>
      </View>
    </View>
  );

  const renderEmptyState = () => (
    <View style={culinaryStoryStyles.emptyContainer}>
      <Text style={culinaryStoryStyles.emptyIcon}>üìñ</Text>
      <Text style={culinaryStoryStyles.emptyTitle}>
        Ch∆∞a c√≥ c√¢u chuy·ªán n√†o
      </Text>
      <Text style={culinaryStoryStyles.emptyDescription}>
        H√£y quay l·∫°i sau ƒë·ªÉ ƒë·ªçc nh·ªØng c√¢u chuy·ªán ·∫©m th·ª±c th√∫ v·ªã!
      </Text>
    </View>
  );

  if (isLoading) {
    return (
      <View style={culinaryStoryStyles.loadingContainer}>
        <ActivityIndicator size="large" color="#FF6B6B" />
        <Text style={culinaryStoryStyles.loadingText}>
          ƒêang t·∫£i c√¢u chuy·ªán...
        </Text>
      </View>
    );
  }

  return (
    <View style={culinaryStoryStyles.container}>
      {/* Header Section */}
      <View style={culinaryStoryStyles.headerSection}>
        <Text style={culinaryStoryStyles.headerTitle}>
          C√¢u Chuy·ªán ·∫®m Th·ª±c
        </Text>
        <Text style={culinaryStoryStyles.headerSubtitle}>
          Kh√°m ph√° nh·ªØng c√¢u chuy·ªán th√∫ v·ªã v·ªÅ vƒÉn h√≥a ·∫©m th·ª±c
        </Text>
      </View>

      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Categories Filter */}
        <View style={culinaryStoryStyles.categoriesContainer}>
          <Text style={culinaryStoryStyles.categoriesTitle}>Danh m·ª•c</Text>
          <ScrollView 
            horizontal 
            showsHorizontalScrollIndicator={false}
            style={culinaryStoryStyles.categoriesList}
          >
            {categories.map(category => (
              <TouchableOpacity
                key={category.key}
                style={[
                  culinaryStoryStyles.categoryButton,
                  activeCategory === category.key && culinaryStoryStyles.categoryButtonActive
                ]}
                onPress={() => setActiveCategory(category.key)}
              >
                <Text style={[
                  culinaryStoryStyles.categoryButtonText,
                  activeCategory === category.key && culinaryStoryStyles.categoryButtonTextActive
                ]}>
                  {category.label}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {/* Featured Stories */}
        {featuredStories.length > 0 && activeCategory === 'all' && (
          <View style={culinaryStoryStyles.featuredSection}>
            <Text style={culinaryStoryStyles.featuredTitle}>
              üåü C√¢u chuy·ªán n·ªïi b·∫≠t
            </Text>
            {featuredStories.map(story => renderStoryCard(story, true))}
          </View>
        )}

        {/* All Stories */}
        <View style={culinaryStoryStyles.content}>
          {filteredStories.length === 0 ? (
            renderEmptyState()
          ) : (
            filteredStories
              .filter(story => !story.featured || activeCategory !== 'all')
              .map(story => renderStoryCard(story))
          )}
        </View>
      </ScrollView>
    </View>
  );
};

export default CulinaryStoryScreen;
