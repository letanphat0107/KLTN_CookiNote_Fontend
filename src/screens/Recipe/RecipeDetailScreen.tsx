import React, { useState } from "react";
import {
  View,
  Text,
  ScrollView,
  Image,
  TouchableOpacity,
  Animated,
} from "react-native";
import { recipeStyles } from "./styles";
import { useAppSelector } from "../../store/hooks";

interface RecipeDetailScreenProps {
  route?: {
    params?: {
      recipeId?: string;
    };
  };
  navigation?: any;
}

// Mock data for ingredients and steps
const mockIngredients = [
  { id: 1, name: "X∆∞∆°ng b√≤", quantity: "1kg", recipe_id: 1 },
  { id: 2, name: "B√°nh ph·ªü kh√¥", quantity: "400g", recipe_id: 1 },
  { id: 3, name: "Th·ªãt b√≤ t√°i", quantity: "200g", recipe_id: 1 },
  { id: 4, name: "H√†nh t√¢y", quantity: "1 c·ªß", recipe_id: 1 },
  { id: 5, name: "G·ª´ng", quantity: "50g", recipe_id: 1 },
  { id: 6, name: "H·∫°t ti√™u", quantity: "1 th√¨a c√† ph√™", recipe_id: 1 },
  { id: 7, name: "Mu·ªëi", quantity: "1 th√¨a c√† ph√™", recipe_id: 1 },
  { id: 8, name: "ƒê∆∞·ªùng ph√®n", quantity: "1 th√¨a canh", recipe_id: 1 },
];

const mockSteps = [
  {
    id: 1,
    content:
      "R·ª≠a s·∫°ch x∆∞∆°ng b√≤, cho v√†o n·ªìi n∆∞·ªõc s√¥i ch·∫ßn 5 ph√∫t ƒë·ªÉ lo·∫°i b·ªè t·∫°p ch·∫•t",
    step_no: 1,
    recipe_id: 1,
    image_url:
      "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_2BWz0CukYGFT9pvza-w6su7smU_xUkoEOg&s",
  },
  {
    id: 2,
    content: "N∆∞·ªõng h√†nh t√¢y v√† g·ª´ng tr√™n b·∫øp gas cho th∆°m, sau ƒë√≥ r·ª≠a s·∫°ch",
    step_no: 2,
    recipe_id: 1,
    image_url:
      "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_2BWz0CukYGFT9pvza-w6su7smU_xUkoEOg&s",
  },
  {
    id: 3,
    content:
      "Cho x∆∞∆°ng b√≤ ƒë√£ ch·∫ßn v√†o n·ªìi n∆∞·ªõc l·∫°nh, n·∫•u tr√™n l·ª≠a l·ªõn ƒë·∫øn khi s√¥i",
    step_no: 3,
    recipe_id: 1,
    image_url:
      "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_2BWz0CukYGFT9pvza-w6su7smU_xUkoEOg&s",
  },
  {
    id: 4,
    content:
      "H·∫° l·ª≠a nh·ªè, v·ªõt b·ªçt, th√™m h√†nh t√¢y, g·ª´ng n∆∞·ªõng v√† gia v·ªã. Ni√™u 2-3 ti·∫øng",
    step_no: 4,
    recipe_id: 1,
    image_url:
      "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_2BWz0CukYGFT9pvza-w6su7smU_xUkoEOg&s",
  },
];

const RecipeDetailScreen: React.FC<RecipeDetailScreenProps> = ({
  route,
  navigation,
}) => {
  const recipeId = route?.params?.recipeId;
  const { isAuthenticated } = useAppSelector((state) => state.auth);

  // Toast message state
  const [toastMessage, setToastMessage] = useState("");
  const [showToast, setShowToast] = useState(false);
  const toastOpacity = useState(new Animated.Value(0))[0];
  const toastTranslateY = useState(new Animated.Value(-100))[0];

  // Toast functions
  const showToastMessage = (message: string, duration: number = 3000) => {
    // Hide any existing toast first
    hideToast();

    setToastMessage(message);
    setShowToast(true);

    // Animate in
    Animated.parallel([
      Animated.timing(toastOpacity, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true,
      }),
      Animated.timing(toastTranslateY, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }),
    ]).start();

    // Auto hide after duration
    setTimeout(() => {
      hideToast();
    }, duration);
  };

  const hideToast = () => {
    if (showToast) {
      Animated.parallel([
        Animated.timing(toastOpacity, {
          toValue: 0,
          duration: 300,
          useNativeDriver: true,
        }),
        Animated.timing(toastTranslateY, {
          toValue: -100,
          duration: 300,
          useNativeDriver: true,
        }),
      ]).start(() => {
        setShowToast(false);
        setToastMessage("");
      });
    }
  };

  const handleStartCooking = () => {
    if (!isAuthenticated) {
      showToastMessage(
        "üîê Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·∫ø ƒë·ªô h∆∞·ªõng d·∫´n n·∫•u ƒÉn!",
        4000
      );

      // Navigate to login after showing toast
      setTimeout(() => {
        if (navigation) {
          navigation.navigate("Login");
        }
      }, 2000);
      return;
    }

    if (navigation) {
      navigation.navigate("RecipeGuide", { recipeId });
    }
  };

  const handleAddToFavorite = () => {
    if (!isAuthenticated) {
      showToastMessage(
        "‚ù§Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u c√¥ng th·ª©c y√™u th√≠ch!",
        3000
      );
      return;
    }

    // TODO: Implement add to favorite logic
    showToastMessage("‚ù§Ô∏è ƒê√£ th√™m v√†o danh s√°ch y√™u th√≠ch!", 2000);
    console.log("Added to favorites");
  };

  const handleShare = () => {
    // TODO: Implement share logic
    showToastMessage("üì§ ƒêang chia s·∫ª c√¥ng th·ª©c...", 2000);
    console.log("Share recipe");
  };

  return (
    <View style={recipeStyles.container}>
      {/* Toast Message */}
      {showToast && (
        <Animated.View
          style={[
            recipeStyles.toastContainer,
            {
              opacity: toastOpacity,
              transform: [{ translateY: toastTranslateY }],
            },
          ]}
        >
          <View style={recipeStyles.toastContent}>
            <Text style={recipeStyles.toastText}>{toastMessage}</Text>
            <TouchableOpacity
              style={recipeStyles.toastCloseButton}
              onPress={hideToast}
            >
              <Text style={recipeStyles.toastCloseText}>‚úï</Text>
            </TouchableOpacity>
          </View>
        </Animated.View>
      )}

      <ScrollView
        style={recipeStyles.content}
        contentContainerStyle={recipeStyles.scrollContainer}
        showsVerticalScrollIndicator={false}
      >
        {/* Recipe Image */}
        <View style={recipeStyles.imageContainer}>
          <Image
            source={{
              uri: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_2BWz0CukYGFT9pvza-w6su7smU_xUkoEOg&s",
            }}
            style={recipeStyles.recipeImage}
          />
        </View>

        {/* Recipe Title */}
        <Text style={recipeStyles.title}>Ph·ªü B√≤ Truy·ªÅn Th·ªëng</Text>

        {/* Recipe Info Section */}
        <View style={recipeStyles.infoSection}>
          <View style={recipeStyles.infoRow}>
            <Text style={recipeStyles.infoLabel}>Th·ªùi gian:</Text>
            <Text style={recipeStyles.infoValue}>2 gi·ªù</Text>
          </View>
          <View style={recipeStyles.infoRow}>
            <Text style={recipeStyles.infoLabel}>ƒê·ªô kh√≥:</Text>
            <Text style={recipeStyles.infoValue}>Trung b√¨nh</Text>
          </View>
          <View style={recipeStyles.infoRow}>
            <Text style={recipeStyles.infoLabel}>Ph·ª•c v·ª•:</Text>
            <Text style={recipeStyles.infoValue}>4 ng∆∞·ªùi</Text>
          </View>
        </View>

        {/* Rating and Tags */}
        <View style={recipeStyles.ratingContainer}>
          <Text style={recipeStyles.ratingText}>‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (4.8/5)</Text>
          <View style={recipeStyles.difficultyBadge}>
            <Text style={recipeStyles.difficultyText}>Trung b√¨nh</Text>
          </View>
        </View>

        {/* Tags */}
        <View style={recipeStyles.tagsContainer}>
          <View style={recipeStyles.tag}>
            <Text style={recipeStyles.tagText}>Ph·ªü</Text>
          </View>
          <View style={recipeStyles.tag}>
            <Text style={recipeStyles.tagText}>Vi·ªát Nam</Text>
          </View>
          <View style={recipeStyles.tag}>
            <Text style={recipeStyles.tagText}>Th·ªãt b√≤</Text>
          </View>
        </View>

        {/* Nutrition Info */}
        <View style={recipeStyles.nutritionContainer}>
          <View style={recipeStyles.nutritionItem}>
            <Text style={recipeStyles.nutritionValue}>450</Text>
            <Text style={recipeStyles.nutritionLabel}>Calo</Text>
          </View>
          <View style={recipeStyles.nutritionItem}>
            <Text style={recipeStyles.nutritionValue}>25g</Text>
            <Text style={recipeStyles.nutritionLabel}>Protein</Text>
          </View>
          <View style={recipeStyles.nutritionItem}>
            <Text style={recipeStyles.nutritionValue}>60g</Text>
            <Text style={recipeStyles.nutritionLabel}>Carbs</Text>
          </View>
          <View style={recipeStyles.nutritionItem}>
            <Text style={recipeStyles.nutritionValue}>12g</Text>
            <Text style={recipeStyles.nutritionLabel}>Fat</Text>
          </View>
        </View>

        {/* Description */}
        <Text style={recipeStyles.description}>
          Ph·ªü b√≤ l√† m√≥n ƒÉn truy·ªÅn th·ªëng c·ªßa Vi·ªát Nam, ƒë∆∞·ª£c ch·∫ø bi·∫øn t·ª´ b√°nh ph·ªü,
          n∆∞·ªõc d√πng trong v√† ng·ªçt t·ª´ x∆∞∆°ng b√≤, c√πng v·ªõi th·ªãt b√≤ t√°i ho·∫∑c ch√≠n.
          ƒê√¢y l√† m√≥n ƒÉn ƒë·∫∑c tr∆∞ng v√† ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t c·ªßa ·∫©m th·ª±c Vi·ªát Nam.
        </Text>

        {/* Ingredients Section */}
        <View style={recipeStyles.section}>
          <Text style={recipeStyles.sectionTitle}>ü•Ñ Nguy√™n li·ªáu</Text>
          <View style={recipeStyles.ingredientsContainer}>
            {mockIngredients.map((ingredient) => (
              <View key={ingredient.id} style={recipeStyles.ingredientItem}>
                <View style={recipeStyles.ingredientBullet} />
                <Text style={recipeStyles.ingredientName}>
                  {ingredient.name}
                </Text>
                <Text style={recipeStyles.ingredientQuantity}>
                  {ingredient.quantity}
                </Text>
              </View>
            ))}
          </View>
        </View>

        {/* Steps Section */}
        <View style={recipeStyles.section}>
          <Text style={recipeStyles.sectionTitle}>üìù C√°c b∆∞·ªõc th·ª±c hi·ªán</Text>
          <View style={recipeStyles.stepsContainer}>
            {mockSteps.map((step) => (
              <View key={step.id} style={recipeStyles.stepItem}>
                <View style={recipeStyles.stepNumber}>
                  <Text style={recipeStyles.stepNumberText}>
                    {step.step_no}
                  </Text>
                </View>
                <View style={recipeStyles.stepContent}>
                  <Text style={recipeStyles.stepText}>{step.content}</Text>
                  {step.image_url && (
                    <Image
                      source={{ uri: step.image_url }}
                      style={recipeStyles.stepImage}
                    />
                  )}
                </View>
              </View>
            ))}
          </View>
        </View>

        {/* Bottom spacing for fixed buttons */}
        <View style={{ height: 100 }} />
      </ScrollView>

      {/* Action Buttons */}
      <View style={recipeStyles.actionButtons}>
        <TouchableOpacity
          style={recipeStyles.favoriteButton}
          onPress={handleAddToFavorite}
        >
          <Text style={recipeStyles.favoriteButtonText}>‚ù§Ô∏è Y√™u th√≠ch</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={recipeStyles.shareButton}
          onPress={handleShare}
        >
          <Text style={recipeStyles.shareButtonText}>üì§ Chia s·∫ª</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[
            recipeStyles.startCookingButton,
            !isAuthenticated && recipeStyles.disabledCookingButton,
          ]}
          onPress={handleStartCooking}
        >
          <Text
            style={[
              recipeStyles.startCookingButtonText,
              !isAuthenticated && recipeStyles.disabledCookingButtonText,
            ]}
          >
            {!isAuthenticated ? "üë®‚Äçüç≥ B·∫Øt ƒë·∫ßu n·∫•u" : "üë®‚Äçüç≥ B·∫Øt ƒë·∫ßu n·∫•u"}
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default RecipeDetailScreen;
