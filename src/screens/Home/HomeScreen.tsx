import React, { useRef, useState, useEffect } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  TextInput,
  Image,
  Animated,
  Dimensions,
  ActivityIndicator,
  RefreshControl,
} from "react-native";
import { useAppSelector } from "../../store/hooks";
import { useCategory } from "../../hooks/useCategory";
import { homeStyles } from "./styles";

const { height } = Dimensions.get("window");

interface HomeScreenProps {
  navigation?: any;
}

const HomeScreen: React.FC<HomeScreenProps> = ({ navigation }) => {
  const { isAuthenticated, user } = useAppSelector((state) => state.auth);
  const {
    categories,
    isLoading: categoriesLoading,
    isRefreshing,
    refreshCategories,
  } = useCategory();

  const [showLoginPrompt, setShowLoginPrompt] = useState(false);
  const slideAnim = useRef(new Animated.Value(height)).current;

  const openPrompt = () => {
    setShowLoginPrompt(true);
    Animated.timing(slideAnim, {
      toValue: 0,
      duration: 300,
      useNativeDriver: true,
    }).start();
  };

  const closePrompt = () => {
    Animated.timing(slideAnim, {
      toValue: height,
      duration: 300,
      useNativeDriver: true,
    }).start(() => setShowLoginPrompt(false));
  };

  const handleProfilePress = () => {
    if (navigation) {
      navigation.navigate("Account");
    }
  };

  const handleLogin = () => {
    if (navigation) {
      navigation.navigate("Login");
    }
    closePrompt();
  };

  const handleRegister = () => {
    if (navigation) {
      navigation.navigate("Register");
    }
    closePrompt();
  };

  const handleRecipePress = (recipe: any) => {
    if (navigation) {
      navigation.navigate("RecipeDetail", { recipeId: recipe.id });
    }
  };

  const handleCategoryPress = (category: any) => {
    if (navigation) {
      if (isAuthenticated) {
        navigation.navigate("CategoryRecipes", {
          categoryId: category.id,
          categoryName: category.name,
        });
      } else {
        openPrompt();
      }
    }
  };

  // Default categories as fallback
  const defaultCategories = [
    { id: 1, name: "M√≥n Vi·ªát", description: "", imageUrl: "üçú" },
    { id: 2, name: "M√≥n √ù", description: "", imageUrl: "üçù" },
    { id: 3, name: "Tr√°ng mi·ªáng", description: "", imageUrl: "üç∞" },
    { id: 4, name: "Salad", description: "", imageUrl: "ü•ó" },
    { id: 5, name: "Th·ªãt n∆∞·ªõng", description: "", imageUrl: "üçñ" },
    { id: 6, name: "H·∫£i s·∫£n", description: "", imageUrl: "üêü" },
    { id: 7, name: "C√† ri", description: "", imageUrl: "ü•ò" },
    { id: 8, name: "C∆°m", description: "", imageUrl: "üçõ" },
    { id: 9, name: "L·∫©u", description: "", imageUrl: "üç≤" },
    { id: 10, name: "ƒê·ªì u·ªëng", description: "", imageUrl: "ü•§" },
  ];

  // Use API categories or fallback to default
  const displayCategories =
    categories.length > 0 ? categories : defaultCategories;

  const popularRecipes = [
    {
      id: 1,
      title: isAuthenticated
        ? "Ph·ªü B√≤ Truy·ªÅn Th·ªëng"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 2,
      title: isAuthenticated
        ? "B√°nh Flan Caramel"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 3,
      title: isAuthenticated
        ? "C∆°m T·∫•m S∆∞·ªùn B√¨ Ch·∫£ 3"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£ 3",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 4,
      title: isAuthenticated
        ? "B√°nh Flan Caramel"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£ 4",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 5,
      title: isAuthenticated
        ? "C∆°m T·∫•m S∆∞·ªùn B√¨ Ch·∫£"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£ 5",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 6,
      title: isAuthenticated
        ? "C∆°m T·∫•m S∆∞·ªùn B√¨ Ch·∫£"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 7,
      title: isAuthenticated
        ? "B√°nh Flan Caramel"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 8,
      title: isAuthenticated
        ? "C∆°m T·∫•m S∆∞·ªùn B√¨ Ch·∫£"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
  ];

  const commonRecipes = [
    {
      id: 1,
      title: isAuthenticated
        ? "Canh Chua C√° L√≥c"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 2,
      title: isAuthenticated ? "Th·ªãt Kho T√†u" : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªõn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 3,
      title: isAuthenticated ? "G√† X√†o S·∫£ ·ªöt" : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªõn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 4,
      title: isAuthenticated ? "Ch√® Ba M√†u" : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªõn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 5,
      title: isAuthenticated
        ? "C∆°m T·∫•m S∆∞·ªùn B√¨ Ch·∫£"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£ 5",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 6,
      title: isAuthenticated
        ? "C∆°m T·∫•m S∆∞·ªùn B√¨ Ch·∫£"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
    {
      id: 7,
      title: isAuthenticated
        ? "B√°nh Flan Caramel"
        : "C√°ch l√†m c∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£",
      image: require("../../../assets/images/cachlamcomtam.jpg"),
    },
  ];

  // Helper function to get category icon/image
  const getCategoryIcon = (category: any) => {
    // If imageUrl contains emoji, use it directly
    if (category.imageUrl && /[\u{1f000}-\u{1f999}]/u.test(category.imageUrl)) {
      return category.imageUrl;
    }

    // If imageUrl is a proper URL, you could use Image component
    // For now, fallback to generic icon
    return "üçΩÔ∏è";
  };

  return (
    <View style={homeStyles.container}>
      {/* Header */}
      <View style={homeStyles.unauthHeader}>
        <View style={homeStyles.searchWrapper}>
          <TextInput
            style={homeStyles.unauthSearchInput}
            placeholder={isAuthenticated ? "T√¨m ki·∫øm c√¥ng th·ª©c..." : ""}
            placeholderTextColor="#999"
          />
        </View>

        {isAuthenticated ? (
          // Authenticated: Show user avatar
          <TouchableOpacity onPress={handleProfilePress}>
            <Image
              source={{
                uri:
                  user?.avatarUrl ||
                  "https://i.pinimg.com/736x/6b/43/47/6b43478d2362f5e6ba3457abc8adcb06.jpg",
              }}
              style={homeStyles.userAvatar}
            />
          </TouchableOpacity>
        ) : (
          // Unauthenticated: Show account button
          <TouchableOpacity
            style={homeStyles.accountButton}
            onPress={handleLogin}
          >
            <Text style={homeStyles.accountButtonText}>T√†i kho·∫£n</Text>
          </TouchableOpacity>
        )}
      </View>

      <ScrollView
        style={homeStyles.scrollContent}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={isRefreshing}
            onRefresh={refreshCategories}
            colors={["#FF6B35"]}
            tintColor="#FF6B35"
          />
        }
      >
        {/* Today's Suggestion Banner - Only for authenticated users */}
        {isAuthenticated && (
          <View style={homeStyles.suggestionBanner}>
            <View style={homeStyles.bannerContent}>
              <View style={homeStyles.bannerTextContainer}>
                <Text style={homeStyles.bannerTitle}>H√¥m nay ƒÉn g√¨?</Text>
                <Text style={homeStyles.bannerSubtitle}>
                  ƒê√£ c√≥ CookiNote lo!
                </Text>
              </View>
              <TouchableOpacity style={homeStyles.bannerButton}>
                <Text style={homeStyles.bannerButtonText}>Xem ngay</Text>
              </TouchableOpacity>
            </View>
            <Image
              source={{
                uri: "https://cdn.eva.vn/upload/4-2021/images/2021-12-02/hom-nay-an-gi-anh-1638435422-875-width640height480.jpeg",
              }}
              style={homeStyles.bannerImage}
            />
          </View>
        )}

        {/* Categories Grid */}
        <View style={homeStyles.categoriesSection}>
          <View style={homeStyles.sectionHeader}>
            <Text style={homeStyles.sectionTitle}>Danh m·ª•c m√≥n ƒÉn</Text>
            {categoriesLoading && (
              <ActivityIndicator size="small" color="#FF6B35" />
            )}
          </View>

          <View style={homeStyles.categoriesGrid}>
            {displayCategories.slice(0, 10).map((category, index) => (
              <TouchableOpacity
                key={category.id || index}
                style={homeStyles.categoryItem}
                onPress={() => handleCategoryPress(category)}
              >
                <View style={homeStyles.categoryIconContainer}>
                  <Text style={homeStyles.categoryIcon}>
                    {getCategoryIcon(category)}
                  </Text>
                </View>
                <Text style={homeStyles.categoryLabel} numberOfLines={2}>
                  {category.name}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>

        {/* Popular Recipes Section */}
        <View style={homeStyles.recipeSection}>
          <Text style={homeStyles.sectionTitle}>M√≥n ƒÉn h·∫•p d·∫´n</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            <View style={homeStyles.recipeRow}>
              {popularRecipes.map((recipe) => (
                <TouchableOpacity
                  key={recipe.id}
                  style={homeStyles.recipeCardHorizontal}
                  onPress={() => handleRecipePress(recipe)}
                >
                  <Image
                    source={recipe.image}
                    style={homeStyles.recipeCardImage}
                  />
                  <Text style={homeStyles.recipeCardTitle}>{recipe.title}</Text>
                </TouchableOpacity>
              ))}
            </View>
          </ScrollView>
        </View>

        {/* Common Recipes Section */}
        <View style={homeStyles.recipeSection}>
          <Text style={homeStyles.sectionTitle}>M√≥n ƒÉn ph·ªï bi·∫øn</Text>
          <View style={homeStyles.commonRecipesContainer}>
            {commonRecipes.map((recipe) => (
              <TouchableOpacity
                key={recipe.id}
                style={homeStyles.commonRecipeCard}
                onPress={() => handleRecipePress(recipe)}
              >
                <Image
                  source={recipe.image}
                  style={homeStyles.recipeCardImage}
                />
                <Text style={homeStyles.recipeCardTitle}>{recipe.title}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </View>

        {/* Add some bottom padding for tab navigator */}
        <View style={{ height: 60 }} />
      </ScrollView>

      {/* Login Popup */}
      {showLoginPrompt && (
        <Animated.View
          style={[
            homeStyles.loginPrompt,
            { transform: [{ translateY: slideAnim }] },
          ]}
        >
          <Text style={homeStyles.promptTitle}>Xin ch√†o b·∫øp tr∆∞·ªüng!</Text>
          <Text style={homeStyles.promptMessage}>
            ƒê·ªÉ l∆∞u c√¥ng th·ª©c v√† t·∫°o th·ª±c ƒë∆°n, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ho·∫∑c ƒëƒÉng k√Ω t√†i
            kho·∫£n m·ªõi nh√©.
          </Text>

          <View style={homeStyles.promptButtons}>
            <TouchableOpacity
              style={homeStyles.registerButton}
              onPress={handleRegister}
            >
              <Text style={homeStyles.registerButtonText}>ƒêƒÉng k√Ω</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={homeStyles.loginButton}
              onPress={handleLogin}
            >
              <Text style={homeStyles.loginButtonText}>ƒêƒÉng nh·∫≠p</Text>
            </TouchableOpacity>
          </View>

          <TouchableOpacity
            style={homeStyles.closePromptButton}
            onPress={closePrompt}
          >
            <Text style={homeStyles.closePromptText}>‚úï</Text>
          </TouchableOpacity>
        </Animated.View>
      )}
    </View>
  );
};

export default HomeScreen;
